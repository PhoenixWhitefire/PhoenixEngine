## Datatypes

Custom types with functions and properties.

### `Color`

* An RGB color

#### `Color.new(R: number, G: number, B: number): `
* Returns a Color with the provided R, G, and B values
* Values are expected to be in the range 0 to 1

#### `.R: number`
* The Red channel

#### `.G: number`
* The Green channel

#### `.B: number`
* The Blue channel

### `EventConnection`

* A connection to an Event

#### `.Connected: boolean`
* Whether the Connection is connected or not

#### `Disconnect(): nil`
* Disconnects the Connection, causing the callback to no longer be invoked, may only be called once

#### `.Signal: any`
* The Event which `:Connect` was called upon to return this Connection

### `EventSignal`

* An Event that can be connected to

#### `Connect((any) -> (any)): EventConnection`
* Connect a callback to the Event

### `GameObject`

* A Game Object
* For organization, the members of this type will be on the Components wiki page

#### `GameObject.validComponents: { string }`
* A list of all valid component names which can be passed into `.new`

#### `GameObject.new(Component: string): GameObject`
* Creates a new GameObject with the provided Component

### `Matrix`

* A 4x4 transformation matrix

#### `Matrix.new(): `
* Creates a new identity matrix

#### `Matrix.fromTranslation(Position: vector): Matrix`
#### `Matrix.fromTranslation(X: number, Y: number, Z: number): Matrix`
* Creates a Matrix which has been translated to the given coordinates (specified as either a `vector` or the individual X, Y, and Z component)

#### `Matrix.lookAt(Eye: vector, Target: vector): Matrix`
* Creates a Matrix at position `Eye` oriented such that the `.Forward` vector moves toward `Target`

#### `Matrix.fromEulerAnglesXYZ(X: number, Y: number, Z: number): Matrix`
* Creates a Matrix which has been rotated by the given Euler angles (in radians) with the rotation order X-Y-Z

#### `__mul(Matrix): Matrix`
* Two Matrices may be multiplied together with the `*` operator

#### `.Right: vector`
* The rightward vector of the Matrix

#### `.C1R1: number`
* The value at Column 1, Row 1

#### `.C4R1: number`
* The value at Column 4, Row 1

#### `.C3R1: number`
* The value at Column 3, Row 1

#### `.C2R1: number`
* The value at Column 2, Row 1

#### `.C1R2: number`
* The value at Column 1, Row 2

#### `.C3R2: number`
* The value at Column 3, Row 2

#### `.C4R2: number`
* The value at Column 4, Row 2

#### `.Up: vector`
* The upward vector of the Matrix

#### `.C4R3: number`
* The value at Column 4, Row 3

#### `.C3R3: number`
* The value at Column 3, Row 3

#### `.C2R3: number`
* The value at Column 2, Row 3

#### `.C1R3: number`
* The value at Column 1, Row 3

#### `.C2R2: number`
* The value at Column 2, Row 2

#### `.Forward: vector`
* The forward vector of the Matrix

#### `.Position: vector`
* The position of the Matrix in world-space

#### `.C1R4: number`
* The value at Column 1, Row 4

#### `.C2R4: number`
* The value at Column 2, Row 4

#### `.C3R4: number`
* The value at Column 3, Row 4

#### `.C4R4: number`
* The value at Column 4, Row 4

## Libraries

Custom libraries.

### `conf`
* Internal Engine configuration state, loaded from file (`phoenix.conf`) upon startup

#### `conf.save(): boolean`
* Save the current state of the configuration to file (`phoenix.conf`), returning whether the file was successfully overwritten

#### `conf.set(Key: string, Value: any): `
* Change a specific value in the configuration

#### `conf.get(Key: string): any`
* Read a specific value from the configuration

### `engine`
* Inspect and modify various parts of the Engine

#### `engine.poplvm(): `
* Pops the topmost Luau VM from the VM stack, causing the VM below it to be used for any Scripts resumed beyond that point

#### `engine.framerate(): number`
* Returns the current framerate

#### `engine.setvsync(VSyncEnabled: boolean): `
* Enables/disables VSync

#### `engine.binddatamodel(NewDataModel: GameObject): `
* Switches Data Models to the specified Object

#### `engine.setwindowsize(Width: number, Height: number): `
* Sets the size of the window to the specified two Width and Height integers

#### `engine.setexplorerselections(Selections: { GameObject }): `
* Changes the built-in Explorer's Object selections to the specified Objects

#### `engine.exit(ExitCode: number? [ 0 ]): `
* Shuts down the Engine and exits the process with the specified Exit Code (or 0 by default)

#### `engine.setfullscreen(Fullscreen: boolean): `
* Enables/disables fullscreen mode

#### `engine.pushlvm(): `
* Pushes a new Luau VM to the Luau VM stack. Scripts resumed past that point will run in the new VM
* The `game` and `workspace` globals in the new VM will depend on the current bound datamodel

#### `engine.setmaxframerate(MaxFramerate: number): `
* Sets the maximum framerate the Engine will reach before self-limiting

#### `engine.physicstimescale(Timescale: number): `
* Sets the time scale factor of the physics simulation

#### `engine.getfullscreen(): boolean`
* Returns whether the Engine is currently in fullscreen

#### `engine.getvsync(): boolean`
* Returns whether VSync is currently enabled

#### `engine.getmaxframerate(): number`
* Returns the current framerate cap

#### `engine.getwindowsize(): number, number`
* Returns the current size of the window as two integers

#### `engine.dwireframes(Enabled: boolean?): boolean`
* Returns whether all visible 3D objects are being rendered with wireframes
* Optionally, the visualization can be enabled/disabled by passing in a boolean argument

#### `engine.isheadless(): boolean`
* Returns whether the Engine is currently running Headless mode

#### `engine.setexplorerroot(Root: GameObject): `
* Changes the Root of the built-in Explorer's hierarchy view

#### `engine.daabbs(Enabled: boolean?): boolean`
* Returns whether AABBs are drawn for all objects with collisions enabled (`.PhysicsCollisions == true`)
* Optionally, the visualization can be enabled/disabled by passing in a boolean argument

### `fs`
* Interacting with the player's filesystem

#### `fs.write(Path: string, Contents: string): boolean`
* Overwrites/creates the file at `Path` with the provided `Contents`
* Returns whether the operation was successful

#### `fs.read(Path: string): string?`
* Reads the file at the given address, and returns the contents
* If the file could not be read, returns `nil`

#### `fs.promptopen(DefaultLocation: string? [ './'  ], Filter: string? [ '*.*' ], FilterName: string? [ 'All files' ], AllowMultipleFiles: boolean? [ false ]): { string }`
* Prompts the player to select a file to open
* Returns the list of files the player selected, or an empty list if the player cancelled the dialog
* If the operation fails, returns `nil` instead

#### `fs.isfile(): `
* Returns whether the specified Path refers to a file

#### `fs.promptsave(DefaultLocation: string? [ './' ], Filter: string? [ '*.*' ], FilterName: string? [ 'All files' ]): string`
* Prompts the player to select a path to save a file to
* Returns the path the player selected, or `nil` if they cancelled the dialog

#### `fs.listdir(Path: string, Filter: 'a' | 'f' | 'd' [ 'a' ]): { [string]: 'f' | 'd' }`
* Returns a table of all the entries in the specified directory
* The keys of the table is the path of the entry, while the values are the type of the entry
* `f` is file, `d` is directory, and `a` is all

#### `fs.isdirectory(): `
* Returns whether the specified Path refers to a directory

#### `fs.ispromptactive(): `
* Returns whether a File Dialog is currently visible to the player and blocking any more file dialogs from being opened

### `imgui`
* UI with Dear ImGui

#### `imgui.beginmainmenubar(): boolean`
* `ImGui::BeginMainMenuBar`

#### `imgui.endmenubar(): `
* `ImGui::EndMenuBar`

#### `imgui.dummy(Width: number [ 0 ], Height: number [ 0 ]): `
* `ImGui::Dummy`

#### `imgui.image(ImagePath: string, Width: number?, Height: number?): `
* `ImGui::Image`

#### `imgui.settooltip(Tooltip: string): `
* `ImGui::SetTooltip`

#### `imgui.button(Text: string, Width: number?, Height: number?): boolean`
* `ImGui::Button`

#### `imgui.menuitem(Text: string, Enabled: boolean? [ true ]): boolean`
* `ImGui::MenuItem`

#### `imgui.inputstring(Name: string, Value: string): string`
* `ImGui::InputText`

#### `imgui.checkbox(Name: string, Value: boolean): boolean`
* `ImGui::Checkbox`

#### `imgui.endmenu(): `

#### `imgui.text(Text: string): `
* `ImGui::Text`

#### `imgui.getcursorpos(): number, number`
* `ImGui::GetCursorPos`

#### `imgui.begin(WindowTitle: string, Options: string? [ "" ]): boolean`
* `ImGui::Begin`

#### `imgui.inputnumber(Text: string, Value: number): number`
* `ImGui::InputDouble`

#### `imgui.setnextwindowopen(Open: boolean? [ true ]): `
* `ImGui::SetNextWindowCollapsed(!Open)`

#### `imgui.sameline(): `
* `ImGui::SameLine`

#### `imgui.setitemtooltip(Text: string): `
* `ImGui::SetItemTooltip`

#### `imgui.combo(Text: string, Options: { string }, CurrentOption: number): number`
* `ImGui::Combo`. Returns the selected option index

#### `imgui.beginchild(Name: string, Width: number?, Height: number?, Flags: string?): boolean`
* `ImGui::BeginChild`

#### `imgui.popid(): `
* `ImGui::PopID`

#### `imgui.treepop(): `
* `ImGui::TreePop`

#### `imgui.getcontentregionavail(): number, number`
* `ImGui::GetContentRegionAvail`

#### `imgui.treenode(Text: string): boolean`
* `ImGui::TreeNode`

#### `imgui.textlink(Text: string): boolean`
* `ImGui::TextLink`

#### `imgui.stylecolors(Theme: 'L' | 'D'): `
* `ImGui::StyleColorsDark`/`ImGui::StyleColorsLight`

#### `imgui.endchild(): `
* `ImGui::EndChild`

#### `imgui.endw(): `
* `ImGui::End`, `endw` and not `end` because `end` is a Luau keyword

#### `imgui.itemhovered(): boolean`
* `ImGui::IsItemHovered`

#### `imgui.itemclicked(): boolean`
* `ImGui::IsItemClicked`

#### `imgui.indent(Indent: number?): `
* `ImGui::Indent`

#### `imgui.setnextwindowfocus(): `
* `ImGui::SetNextWindowFocus`

#### `imgui.setcursorpos(X: number, Y: number): `
* `ImGui::SetCursorPos`

#### `imgui.pushid(Id: string): `
* `ImGui::PushID`

#### `imgui.beginfullscreen(Name: string, OffsetX: number? [ 0 ], OffsetY: number? [ 0 ]): `
* Creates a Dear ImGui window which takes up the entire screen

#### `imgui.endmainmenubar(): `
* `ImGui::EndMainMenuBar`

#### `imgui.beginmenubar(): boolean`
* `ImGui::BeginMenuBar`

#### `imgui.beginmenu(Name: string, Enabled: boolean?): boolean`
* `ImGui::BeginMenu`

### `input`
* Checking player inputs

#### `input.ismousegrabbed(): boolean`
* Returns whether the mouse cursor is currently restricted to the window

#### `input.setmousegrabbed(Grabbed: boolean): `
* Grabs/ungrabs the mouse cursor

#### `input.guihandledm(): boolean`
* Returns whether Dear ImGui is using the player's mouse inputs

#### `input.setmousepos(X: number, Y: number): `
* Sets the position of the mouse cursor in the window as an offset from the top-left corner

#### `input.iscursorvisible(): boolean`
* Returns whether the mouse cursor is currently visible

#### `input.setcursorvisible(Visible: boolean): `
* Sets the visibility of the mouse cursor to the specified value

#### `input.getmousepos(): number, number`
* Returns the current position of the player's mouse cursor, offset from the top-right

#### `input.guihandled(): boolean`
* Returns whether Dear ImGui is using the player's inputs at all

#### `input.mousedown(Button: 'l' | 'r' | 'e'): boolean`
* Returns whether the specified mouse button (`l`eft, `r`ight, or `e`ither) is currently being pressed

#### `input.keypressed(Key: string): boolean`
* Returns whether the specified key (as lowercase, e.g. `'a'`, `'b'`) is currently being pressed

#### `input.guihandledk(): boolean`
* Returns whether Dear ImGui is using the player's keyboard inputs

### `json`
* Encoding and decoding JSON files

#### `json.encode(Value: any): string`
* Encodes the provided value into a JSON string

#### `json.parse(Json: string): any`
* Decodes the JSON string and returns it as a value

### `mesh`
* Mesh assets

#### `mesh.save(Id: string, SaveTo: string): `
* Saves the mesh data at the provided path to a file

#### `mesh.set(Id: string, Data: { Vertices: { { Position: vector, Normal: vector, Paint: { R: number, G: number, B: number, A: number }, UV: { number } } }, Indices: { number } }): `
* Associates the provided mesh data with the provided path

#### `mesh.get(Id: string): { Vertices: { { Position: vector, Normal: vector, Paint: { R: number, G: number, B: number, A: number }, UV: { number } } }, Indices: { number } }`
* Returns the provided mesh data associated with the provided path

### `model`
* `glTF` models

#### `model.import(Path: string): GameObject & Model`
* Imports the glTF model at the provided path and returns it as a `Model` GameObject

### `net`
* **This API has been disabled due to dependency burden**

#### `net.request(): `
* Performs an HTTP request to the given URL and returns the response

### `scene`
* Scene assets

#### `scene.load(Path: string): { GameObject }?, string?`
* Loads `GameObject`s from the scene file at the provided path, returning a list of the root objects or `nil` and an error message upon failure

#### `scene.save(RootNodes: { GameObject }, Path: string): boolean`
* Saves the list of `GameObject`s to the provided path, returning whether the operation succeeded

### `world`
* World queries

#### `world.aabbcast(APos: vector, ASize: vector, IgnoreList: { GameObject }): { Object: GameObject, Position: vector, Normal: vector }?`
* Cast an AABB

#### `world.raycast(Origin: vector, CastVector: vector, IgnoreList: { GameObject }): { Object: GameObject, Position: vector, Normal: vector }?`
* Cast a ray

#### `world.aabbquery(APos: vector, ASize: vector, IgnoreList: { GameObject }): { GameObject }`
* Query all objects within the provided AABB

## Globals

Other globals.

#### `_VMNAME: string`
* A non-unique identifier for the current Luau VM

#### `appendlog(...: any): ()`
* Same as `print`, but does not prefix the log message with `[INFO]`

#### `breakpoint(Line: number): ()`
* Set a breakpoint at the given line

#### `game: GameObject & DataModel`
* The GameObject acting as the Data Model of the Engine

#### `loadthread(Code: string, ChunkName: string?): ( thread?, string? )`
* Like `loadstring` in *other* runtimes, however does not compromise Global Import optimizations and returns a coroutine instead of a function. If an error occurs, returns `nil` as the first value and the error message as the second value

#### `loadthreadfromfile(File: string, ChunkName: string?): ( thread?, string? )`
* Similar to `loadthread`, however loads from a file instead of from a string directly

#### `script: GameObject & Script`
* The Script object the current coroutine is running as

#### `sleep(SleepTime: number): ()`
* Yields the thread for the specified number of seconds

#### `workspace: GameObject & Workspace`
* Shorthand for `game.Workspace`

