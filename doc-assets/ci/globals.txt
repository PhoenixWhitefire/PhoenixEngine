## Globals

A (possibly) incomplete list of all Script Globals provided by the Engine not present in Vanilla Luau.


#### `conf_get(Key: string) : any`
* Reads a value from the Configuration

#### `fd_inprogress() : boolean `
* Returns whether or not a File Dialog triggered via `fd_open` or `fd_save` is currently active. Subsequent attempts to call either of those functions while a Dialog is active will result in an error

#### `fd_open(StartingDirectory: string?, AllowMultipleFiles: boolean?, FilterName: string?, FileExtensionFilter: string?) : { string }`
* Prompts the User to select one or more to open
* `FilterName` is the human-readable name for the File Extension Filters you wish to place (such as `All Files` or `Image Files`)
* `FileExtensionFilter` is a string of semicolon-separated file extensions, such as `png;jpg;jpeg`
* If the User does not select any files (e.g. by closing the Dialog), the function returns an empty table

#### `fd_save(StartingDirectory: string?, FilterName: string?, FileExtensionFilter: string?) : string?`
* Prompts the User to select a path for a file to be saved at
* `FilterName` is the human-readable name for the File Extension Filters you wish to place (such as `All Files` or `Image Files`)
* `FileExtensionFilter` is a string of semicolon-separated file extensions, such as `png;jpg;jpeg`
* If the User does not select a target file (e.g. by closing the Dialog), the function returns `nil`

#### `file_read(Path: string) : string`
* Reads and returns the contents fo the entire file at the provided path

#### `file_write(Path: string, Contents: string, PrependResourcesDirectory: boolean)`
* Overwrites the file at the provided path with the provided contents
* If `PrependResourcesDirectory` is true, the value of `ResourcesDirectory` from the Configuration File is prepended to the path

#### `file_write_rcd(Path: string, Contents: string, PrependResourcesDirectory: boolean)`
* Same as file_write, but *R*ecursively *C*reates *D*irectories if they do not exist

#### `imgui_begin(Title: string) : boolean`
* Begins a Dear ImGui widget, returning whether it is expanded

#### `imgui_button(Text: string) : boolean`
* Draws a text button, returning whether it is being clicked

#### `imgui_checkbox(Name: string, Checked: boolean) : boolean`
* Draws a checkbox, set to the specified value and returning the modified value

#### `imgui_end()`
* Ends the last Dear ImGui widget

#### `imgui_image(Path: string, Width: number?, Height: number?)`
* Draws an image label
* The resolution of the texture is used by default as the size, but can be overriden by the optional `Width` and `Height` arguments

#### `imgui_indent(Level: number)`
* Indents the succeeding set of UI elements with the specified additive level

#### `imgui_input_float(Name: string, Value: number) : number`
* Draws a decimal-number input box, containing the specified value and returning the modified value

#### `imgui_input_text(Name: string, Value: string) : string`
* Draws a text input box, containing the specified value and returning the modified value

#### `imgui_item_clicked() : boolean`
* Returns whether the previous UI element is being clicked

#### `imgui_item_hovered() : boolean`
* Returns whether the previous UI element is being hovered-over

#### `imgui_setitemtooltip(Tooltip: string)`
* Sets the tooltip of the previous UI element

#### `imgui_text(Text: string)`
* Draws a text label

#### `imgui_textlink(Text: string) : boolean`
* Draws hyperlink-style text label, returning whether it is being clicked

#### `input_keypressed(Key: string) : boolean`
* Returns whether the key provided is being held down by the User, such as `input_keypressed("w")` to check if the `W` key is being pressed

#### `input_mouse_bdown(CheckLeftMouseButton: boolean) : boolean`
* Returns whether the left or right Mouse button is being held. Left can be specified by having `true` as the first parameter, right with `false`

#### `input_mouse_getpos() : (number, number)`
* Returns the X and Y position of the Mouse as a tuple of integers

#### `input_mouse_setlocked(Locked: boolean)`
* Sets whether the Mouse should be locked to the window and made invisible

#### `json_dump(Table: { [any]: any }) : string`
* Converts the provided Table into a string that encodes a JSON table

#### `json_parse(Json: string) : { [any]: any }`
* Parses a JSON string into a Luau table

#### `matrix_getv(Matrix: Matrix, Column: number, Row: number) : number`
* Returns the number at the provided `Column` and `Row` of the provided `Matrix`
* `Column` and `Row` should be integers within the range `0` - `3`, but no bounds checking is done

#### `matrix_setv(Matrix: Matrix, Column: number, Row: number, Value: number)`
* Set the number at the provided `Column` and `Row` of the provided `Matrix` to `Value`
* `Column` and `Row` should be integers within the range `0` - `3`, but no bounds checking is done

#### `mesh_get(Path: string) : { Vertices: { { Position: vector, Normal: vector, Color: Color, UV: { number, number }} }, Indices: { number } }`
* Fetches the `.hxmesh` asset at the provided path and returns it as a dictionary
* This uses the same cache as the `.Asset` property of Meshes, so primitives can also be indexed with, for example, `!Cube` and `!Blank`
* This may reload the mesh from file, if it was never used on that mesh before and if that mesh is not a primitive

#### `mesh_save(Name: string, Path: string)`
* Saves the Mesh associated with `Name` to a file at `Path`

#### `mesh_set(Name: string, Mesh: { Vertices: { { Position: vector, Normal: vector, Color: Color, UV: { number, number }} }, Indices: { number } })`
* Associates, internally, the provided `Mesh` data with the provided `Name`
* This is like overwriting the file, but only applies to the active session, so whenever the Engine attempts to load a mesh from the `Path` overridden, it find the mesh specified instead

#### `model_import(Path: string) : { GameObject }`
* Imports the `.gltf`/`.glb` model at `Path`, and returns the resultant root of the hierarchy in an array

#### `require(Path: string) : any`
* Loads the module at the specified `Path`, relative to the `resources/` directory

#### `scene_load(Path: string) : { GameObject }`
* Loads the scene at `Path` and returns an array of its root Objects

#### `scene_save(RootNodes: { GameObject }, Path: string)`
* Serializes the provided array of `RootNodes`, including their children, and saves it to `Path`

#### `sleep(SleepTime: number) : number`
* Yields the Script for the specified number of seconds, returning the same number when the Script is resumed

#### `world_aabbcast(AabbPosition: vector, AabbSize: vector, IgnoreList: { GameObject }) : { Object: GameObject, Position: vector, Normal: vector }`
* Returns the Object intersecting with the provided Axis-Aligned Bounding Box the most
* If no intersections are detected, it returns `nil`

#### `world_aabbquery(AabbPosition: vector, AabbSize: vector, IgnoreList: { GameObject }) : { GameObject }`
* Returns a list of Objects intersecting with the provided Axis-Aligned Bounding Box
* If no intersections are detected, it returns an empty table

#### `world_raycast(Origin: vector, CastVector: vector, IgnoreList: { GameObject }) : { Object: GameObject, Position: vector, Normal: vector }`
* Casts a ray from `Origin` in the direction and of the magnitude of `CastVector`
* If no intersections are detected, it returns `nil`

## Datatypes

Custom types with functions and properties.

### `Color`
* A Color stored with Red, Green, and Blue components ranging from `0` to `1`

#### Constructors:

##### `Color.new(R: number, G: number, B: number)`
* Constructs a new `Color` with the values provided

#### Properties:
* `R`, `G`, `B`: The Red, Green and Blue components

### `Matrix`
* A 4x4 Matrix

#### Constructors:

##### `Matrix.new()`
* Constructs a new, identity Matrix without any transformations

#### `Matrix.fromTranslation(Position: vector)`
* Constructs a new Matrix at the position of the given vector

##### `Matrix.fromTranslation(X: number, Y: number, Z: number)`
* Constructs a new Matrix at the given coordinates

##### `Matrix.fromEulerAnglesXYZ(X: number, Y: number, Z: number)`
* Constructs a new Matrix with the provided rotation in radians, rotated in the order X, Y, and then Z.

##### `Matrix.lookAt(Eye: vector, Target: vector)`
* Constructs a new Matrix at position `Eye` rotated to face toward `Target`

#### Properties:
* `Position: vector`: The coordinates of the Matrix
* `Forward: vector`: A unit vector representing the Matrix's forward basis 

#### Operators:
* `*`: Multiply two Matrices to transform one by the other

### `GameObject`
* A Game Object

#### Constructors:

##### `GameObject.new(FirstComponent: string)`
* Constructs a new GameObject with the provided `FirstComponent`


### Properties:
* `Enabled: boolean`: Whether the Engine updates and recognizes this Object, essentially freezing it if it is disabled
* `Name: string`: The name of the Object, usually what was passed into `GameObject.new`
* `ObjectId: Integer READONLY`: The ID of the Object, an integer. Remains the same throughout the session, but not guaranteed between sessions
* `Parent: GameObject`: The hierarchal parent of the Object, or `nil` if it does not have one
* `Serializes: boolean`: Whether or not the Object should be saved with the scene if it is serialized with `scene_save`

### Functions:
* `Destroy() -> ()`: Marks the Object as "pending for destruction". This may or may not remove the Object from memory immediately, depending on whether the Engine is actively using the Object for some purpose
* `Duplicate() -> (GameObject)`: Creates a duplicate of the Object
* `FindChild(String) -> (GameObject)`: Returns the child Object with the given name, or `nil` if it doesn't exist
* `GetChildren() -> (Array)`: Returns a list of the Object's direct children
* `GetComponentNames() -> (Array)`: Returns a list of the names of all Components that the Object currently has
* `GetDescendants() -> (Array)`: Returns all descendants of the Object (i.e. its children, and their children, etc)
* `GetFullName() -> (String)`: Returns the full, hierarchal path of the Object
* `HasComponent(String) -> (Bool)`: Returns whether or not the Object has the given Component
* `IsA(String) -> (Bool)`: Equivalent to `:HasComponent`
* `MergeWith(GameObject) -> ()`: Merges the Objects together, replacing descendants with the same name

